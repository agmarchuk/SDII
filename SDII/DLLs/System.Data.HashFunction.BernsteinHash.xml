<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Data.HashFunction.BernsteinHash</name>
    </assembly>
    <members>
        <member name="T:System.Data.HashFunction.ModifiedBernsteinHash">
            <summary>
            Implementation of Modified Bernstein hash as specified at http://www.eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx#djb2.
            
            "
            [The Modified Bernstein hash is a] minor update to <see cref="T:System.Data.HashFunction.BernsteinHash">Bernstein's hash</see> replaces addition with 
              XOR for the combining step. 
            This change does not appear to be well known or often used, the original algorithm is still 
              recommended by nearly everyone, but the new algorithm typically results in a better distribution.
              
            Dan Bernstein created [the Bernstein hash] algorithm and posted it in a newsgroup. 
              It is known by many as the Chris Torek hash because Chris went a long way toward popularizing it. 
              Since then it has been used successfully by many, but despite that the algorithm itself is not very sound 
                when it comes to avalanche and permutation of the internal state. 
              It has proven very good for small character keys, where it can outperform algorithms that result 
                in a more random distribution.    
                
              Bernstein's hash should be used with caution. 
              It performs very well in practice, for no apparently known reasons 
                (much like how the constant 33 does better than more logical constants for no apparent reason), 
                but in theory it is not up to snuff. 
              Always test this function with sample data for every application to ensure that it does not encounter 
                a degenerate case and cause excessive collisions.
            "
            </summary>
        </member>
        <member name="M:System.Data.HashFunction.ModifiedBernsteinHash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.HashFunction.ModifiedBernsteinHash"/> class.
            </summary>
            <remarks>
            <see cref="P:System.Data.HashFunction.HashFunctionBase.HashSize"/> defaults to 32 bits.
            </remarks>
            <inheritdoc cref="M:System.Data.HashFunction.HashFunctionBase.#ctor(System.Int32)"/>
        </member>
        <member name="M:System.Data.HashFunction.ModifiedBernsteinHash.ComputeHashInternal(System.Data.HashFunction.Utilities.UnifiedData.UnifiedData)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.HashFunction.ModifiedBernsteinHash.ComputeHashAsyncInternal(System.Data.HashFunction.Utilities.UnifiedData.UnifiedData)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.HashFunction.BernsteinHash">
            <summary>
            Implementation of Bernstein hash as specified at http://www.eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx#djb.
            
            From http://www.eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx#djb:
            "
              Dan Bernstein created this algorithm and posted it in a newsgroup. 
              It is known by many as the Chris Torek hash because Chris went a long way toward popularizing it. 
              Since then it has been used successfully by many, but despite that the algorithm itself is not very sound 
                when it comes to avalanche and permutation of the internal state. 
              It has proven very good for small character keys, where it can outperform algorithms that result 
                in a more random distribution.    
                
              Bernstein's hash should be used with caution. 
              It performs very well in practice, for no apparently known reasons 
                (much like how the constant 33 does better than more logical constants for no apparent reason), 
                but in theory it is not up to snuff. 
              Always test this function with sample data for every application to ensure that it does not encounter 
                a degenerate case and cause excessive collisions.
            "
            </summary>
        </member>
        <member name="M:System.Data.HashFunction.BernsteinHash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.HashFunction.BernsteinHash"/> class.
            </summary>
            <remarks>
            HashSize defaults to 32 bits.
            </remarks>
            <inheritdoc cref="M:System.Data.HashFunction.HashFunctionBase.#ctor(System.Int32)"/>
        </member>
        <member name="M:System.Data.HashFunction.BernsteinHash.ComputeHashInternal(System.Data.HashFunction.Utilities.UnifiedData.UnifiedData)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.HashFunction.BernsteinHash.ComputeHashAsyncInternal(System.Data.HashFunction.Utilities.UnifiedData.UnifiedData)">
            <inheritdoc />
        </member>
    </members>
</doc>
